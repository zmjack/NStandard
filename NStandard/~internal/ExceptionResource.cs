using System.ComponentModel;

namespace NStandard;

internal enum ExceptionResource
{
    ArgumentOutOfRange_IndexMustBeLessOrEqual,
    ArgumentOutOfRange_IndexMustBeLess,
    ArgumentOutOfRange_IndexCount,
    ArgumentOutOfRange_IndexCountBuffer,
    ArgumentOutOfRange_Count,
    ArgumentOutOfRange_Year,
    Arg_ArrayPlusOffTooSmall,
    NotSupported_ReadOnlyCollection,
    Arg_RankMultiDimNotSupported,
    Arg_NonZeroLowerBound,
    ArgumentOutOfRange_GetCharCountOverflow,
    ArgumentOutOfRange_ListInsert,
    ArgumentOutOfRange_NeedNonNegNum,
    ArgumentOutOfRange_NotGreaterThanBufferLength,
    ArgumentOutOfRange_SmallCapacity,
    Argument_InvalidOffLen,
    Argument_CannotExtractScalar,
    ArgumentOutOfRange_BiggerThanCollection,
    Serialization_MissingKeys,
    Serialization_NullKey,
    NotSupported_KeyCollectionSet,
    NotSupported_ValueCollectionSet,
    InvalidOperation_NullArray,
    TaskT_TransitionToFinal_AlreadyCompleted,
    TaskCompletionSourceT_TrySetException_NullException,
    TaskCompletionSourceT_TrySetException_NoExceptions,
    NotSupported_StringComparison,
    ConcurrentCollection_SyncRoot_NotSupported,
    Task_MultiTaskContinuation_NullTask,
    InvalidOperation_WrongAsyncResultOrEndCalledMultiple,
    Task_MultiTaskContinuation_EmptyTaskList,
    Task_Start_TaskCompleted,
    Task_Start_Promise,
    Task_Start_ContinuationTask,
    Task_Start_AlreadyStarted,
    Task_RunSynchronously_Continuation,
    Task_RunSynchronously_Promise,
    Task_RunSynchronously_TaskCompleted,
    Task_RunSynchronously_AlreadyStarted,
    AsyncMethodBuilder_InstanceNotInitialized,
    Task_ContinueWith_ESandLR,
    Task_ContinueWith_NotOnAnything,
    Task_InvalidTimerTimeSpan,
    Task_Delay_InvalidMillisecondsDelay,
    Task_Dispose_NotCompleted,
    Task_ThrowIfDisposed,
    Task_WaitMulti_NullTask,
    ArgumentException_OtherNotArrayOfCorrectLength,
    ArgumentNull_Array,
    ArgumentNull_SafeHandle,
    ArgumentOutOfRange_EndIndexStartIndex,
    ArgumentOutOfRange_Enum,
    ArgumentOutOfRange_HugeArrayNotSupported,
    Argument_AddingDuplicate,
    Argument_InvalidArgumentForComparison,
    Arg_LowerBoundsMustMatch,
    Arg_MustBeType,
    Arg_Need1DArray,
    Arg_Need2DArray,
    Arg_Need3DArray,
    Arg_NeedAtLeast1Rank,
    Arg_RankIndices,
    Arg_RanksAndBounds,
    InvalidOperation_IComparerFailed,
    NotSupported_FixedSizeCollection,
    Rank_MultiDimNotSupported,
    Arg_TypeNotSupported,
    Argument_SpansMustHaveSameLength,
    Argument_InvalidFlag,
    CancellationTokenSource_Disposed,
    Argument_AlignmentMustBePow2
}

[EditorBrowsable(EditorBrowsableState.Never)]
internal static class ExceptionResourceExtensions
{
    internal static string ToResourceString(this ExceptionResource @this)
    {
        return @this switch
        {
            ExceptionResource.ArgumentOutOfRange_IndexMustBeLessOrEqual => "Index was out of range. Must be non-negative and less than or equal to the size of the collection.",
            ExceptionResource.ArgumentOutOfRange_IndexMustBeLess => "Index was out of range. Must be non-negative and less than the size of the collection.",
            ExceptionResource.ArgumentOutOfRange_IndexCount => "Index and count must refer to a location within the string.",
            ExceptionResource.ArgumentOutOfRange_IndexCountBuffer => "Index and count must refer to a location within the buffer.",
            ExceptionResource.ArgumentOutOfRange_Count => "Count must be positive and count must refer to a location within the string/array/collection.",
            ExceptionResource.ArgumentOutOfRange_Year => "Year must be between 1 and 9999.",
            ExceptionResource.Arg_ArrayPlusOffTooSmall => "Destination array is not long enough to copy all the items in the collection. Check array index and length.",
            ExceptionResource.NotSupported_ReadOnlyCollection => "Collection is read-only.",
            ExceptionResource.Arg_RankMultiDimNotSupported => "Only single dimensional arrays are supported for the requested action.",
            ExceptionResource.Arg_NonZeroLowerBound => "The lower bound of target array must be zero.",
            ExceptionResource.ArgumentOutOfRange_GetCharCountOverflow => "Too many bytes. The resulting number of chars is larger than what can be returned as an int.",
            ExceptionResource.ArgumentOutOfRange_ListInsert => "Index must be within the bounds of the List.",
            ExceptionResource.ArgumentOutOfRange_NeedNonNegNum => "Non-negative number required.",
            ExceptionResource.ArgumentOutOfRange_NotGreaterThanBufferLength => "Must not be greater than the length of the buffer.",
            ExceptionResource.ArgumentOutOfRange_SmallCapacity => "capacity was less than the current size.",
            ExceptionResource.Argument_InvalidOffLen => "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.",
            ExceptionResource.Argument_CannotExtractScalar => "Cannot extract a Unicode scalar value from the specified index in the input.",
            ExceptionResource.ArgumentOutOfRange_BiggerThanCollection => "Larger than collection size.",
            ExceptionResource.Serialization_MissingKeys => "The Keys for this Hashtable are missing.",
            ExceptionResource.Serialization_NullKey => "One of the serialized keys is null.",
            ExceptionResource.NotSupported_KeyCollectionSet => "Mutating a key collection derived from a dictionary is not allowed.",
            ExceptionResource.NotSupported_ValueCollectionSet => "Mutating a value collection derived from a dictionary is not allowed.",
            ExceptionResource.InvalidOperation_NullArray => "The underlying array is null.",
            ExceptionResource.TaskT_TransitionToFinal_AlreadyCompleted => "An attempt was made to transition a task to a final state when it had already completed.",
            ExceptionResource.TaskCompletionSourceT_TrySetException_NullException => "The exceptions collection included at least one null element.",
            ExceptionResource.TaskCompletionSourceT_TrySetException_NoExceptions => "The exceptions collection was empty.",
            ExceptionResource.NotSupported_StringComparison => "The string comparison type passed in is currently not supported.",
            ExceptionResource.ConcurrentCollection_SyncRoot_NotSupported => "The SyncRoot property may not be used for the synchronization of concurrent collections.",
            ExceptionResource.Task_MultiTaskContinuation_NullTask => "The tasks argument included a null value.",
            ExceptionResource.InvalidOperation_WrongAsyncResultOrEndCalledMultiple => "Either the IAsyncResult object did not come from the corresponding async method on this type, or the End method was called multiple times with the same IAsyncResult.",
            ExceptionResource.Task_MultiTaskContinuation_EmptyTaskList => "The tasks argument contains no tasks.",
            ExceptionResource.Task_Start_TaskCompleted => "Start may not be called on a task that has completed.",
            ExceptionResource.Task_Start_Promise => "Start may not be called on a promise-style task.",
            ExceptionResource.Task_Start_ContinuationTask => "Start may not be called on a continuation task.",
            ExceptionResource.Task_Start_AlreadyStarted => "Start may not be called on a task that was already started.",
            ExceptionResource.Task_RunSynchronously_Continuation => "RunSynchronously may not be called on a continuation task.",
            ExceptionResource.Task_RunSynchronously_Promise => "RunSynchronously may not be called on a task not bound to a delegate, such as the task returned from an asynchronous method.",
            ExceptionResource.Task_RunSynchronously_TaskCompleted => "RunSynchronously may not be called on a task that has already completed.",
            ExceptionResource.Task_RunSynchronously_AlreadyStarted => "RunSynchronously may not be called on a task that was already started.",
            ExceptionResource.AsyncMethodBuilder_InstanceNotInitialized => "The builder was not properly initialized.",
            ExceptionResource.Task_ContinueWith_ESandLR => "The specified TaskContinuationOptions combined LongRunning and ExecuteSynchronously.  Synchronous continuations should not be long running.",
            ExceptionResource.Task_ContinueWith_NotOnAnything => "The specified TaskContinuationOptions excluded all continuation kinds.",
            ExceptionResource.Task_InvalidTimerTimeSpan => "The value needs to translate in milliseconds to -1 (signifying an infinite timeout), 0, or a positive integer less than or equal to the maximum allowed timer duration.",
            ExceptionResource.Task_Delay_InvalidMillisecondsDelay => "The value needs to be either -1 (signifying an infinite timeout), 0 or a positive integer.",
            ExceptionResource.Task_Dispose_NotCompleted => "A task may only be disposed if it is in a completion state (RanToCompletion, Faulted or Canceled).",
            ExceptionResource.Task_ThrowIfDisposed => "The task has been disposed.",
            ExceptionResource.Task_WaitMulti_NullTask => "The tasks array included at least one null element.",
            ExceptionResource.ArgumentException_OtherNotArrayOfCorrectLength => "The object is not an array with the same number of elements as the array to compare it to.",
            ExceptionResource.ArgumentNull_Array => "Array cannot be null.",
            ExceptionResource.ArgumentNull_SafeHandle => "SafeHandle cannot be null.",
            ExceptionResource.ArgumentOutOfRange_EndIndexStartIndex => "endIndex cannot be greater than startIndex.",
            ExceptionResource.ArgumentOutOfRange_Enum => "Enum value was out of legal range.",
            ExceptionResource.ArgumentOutOfRange_HugeArrayNotSupported => "Arrays larger than 2GB are not supported.",
            ExceptionResource.Argument_AddingDuplicate => "An item with the same key has already been added.",
            ExceptionResource.Argument_InvalidArgumentForComparison => "Type of argument is not compatible with the generic comparer.",
            ExceptionResource.Arg_LowerBoundsMustMatch => "The arrays' lower bounds must be identical.",
            ExceptionResource.Arg_MustBeType => "Type must be a type provided by the runtime.",
            ExceptionResource.Arg_Need1DArray => "Array was not a one-dimensional array.",
            ExceptionResource.Arg_Need2DArray => "Array was not a two-dimensional array.",
            ExceptionResource.Arg_Need3DArray => "Array was not a three-dimensional array.",
            ExceptionResource.Arg_NeedAtLeast1Rank => "Must provide at least one rank.",
            ExceptionResource.Arg_RankIndices => "Indices length does not match the array rank.",
            ExceptionResource.Arg_RanksAndBounds => "Number of lengths and lowerBounds must match.",
            ExceptionResource.InvalidOperation_IComparerFailed => "Failed to compare two elements in the array.",
            ExceptionResource.NotSupported_FixedSizeCollection => "Collection was of a fixed size.",
            ExceptionResource.Rank_MultiDimNotSupported => "Only single dimension arrays are supported here.",
            ExceptionResource.Arg_TypeNotSupported => "Specified type is not supported",
            ExceptionResource.Argument_SpansMustHaveSameLength => "Length of items must be same as length of keys.",
            ExceptionResource.Argument_InvalidFlag => "Value of flags is invalid.",
            ExceptionResource.CancellationTokenSource_Disposed => "The CancellationTokenSource has been disposed.",
            ExceptionResource.Argument_AlignmentMustBePow2 => "The alignment must be a power of two.",
            _ => throw new NotImplementedException(),
        };
    }
}
