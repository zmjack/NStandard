<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
using System.Collections.Generic;
using System.Linq;

namespace NStandard
{
    public static partial class Any
    {
<#
    for(int t = 1; t <= MAX_ARGUMENT_LENGTH; t++)
    {
#>
        <#=Code(t)#>
<#
    }
#>
    }
}

<#+
const int MAX_ARGUMENT_LENGTH = 8;

private string Code(int argc)
{
    var summary = @"/// <summary>
        /// Iterate over each element of multiple sequences simultaneously.
        /// </summary>";

    if (argc > 1)
    {
        var indices = GetIndices(argc);
        var genericsCode = string.Join(", ", indices.Select(i => Type(i)));

        return $@"{summary}
        public static IEnumerable<StructTuple<{genericsCode}>> Zip<{genericsCode}>(
            {string.Join($",{Environment.NewLine}{Tabs(3)}", indices.Select(i => $"IEnumerable<{Type(i)}> {Parameter(i)}"))}
        )
        {{
            {string.Join($"{Environment.NewLine}{Tabs(3)}", indices.Select(i => $"using IEnumerator<{Type(i)}> _{Parameter(i)} = {Parameter(i)}.GetEnumerator();"))}

            while ({string.Join($"{Environment.NewLine}{Tabs(4)}&& ", indices.Select(i => $"_{Parameter(i)}.MoveNext()"))})
            {{
                yield return new(
                    {string.Join($",{Environment.NewLine}{Tabs(5)}", indices.Select(i => $"_{Parameter(i)}.Current"))}
                );
            }}
        }}";
    }
    else
    {
        return $@"{summary}
        public static IEnumerable<IEnumerable<T1>> Zip<T1>(IEnumerable<IEnumerable<T1>> enumerables)
        {{
            IEnumerator<T1>[] enumerators = enumerables.Select(x => x.GetEnumerator()).ToArray();
            while (enumerators.All(x => x.MoveNext()))
            {{
                yield return enumerators.Select(e => e.Current);
            }}
        }}";
    }
}

private string Type(int i) => i < MAX_ARGUMENT_LENGTH ? $"T{i}" : "TRest";
private string Parameter(int i) => i < MAX_ARGUMENT_LENGTH ? $"e{i}" : "rest";

private string Tabs(int count)
{
    var sb = new StringBuilder();
    for (int i = 0; i < count; i++)
    {
        sb.Append("    ");
    }
    return sb.ToString();
}

private IEnumerable<int> GetIndices(int argc)
{
    for (int i = 1; i <= argc; i++)
    {
        yield return i;
    }
}
#>
