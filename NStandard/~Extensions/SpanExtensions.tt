<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
#if NET5_0_OR_GREATER
using System;
using System.ComponentModel;

namespace NStandard
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static class SpanExtensions
    {
<#
    for(int t = 2; t <= MAX_ARGUMENT_LENGTH; t++)
    {
#>
        <#=Code(t)#>
<#
    }
#>
    }
}
#endif

<#+
const int MAX_ARGUMENT_LENGTH = 8;

private string Code(int argc)
{
    var indices = GetIndices(argc);
    var genericsCode = string.Join(", ", indices.Select(i => Type(i)));

    var sb = new StringBuilder();
    sb.AppendLine($"[EditorBrowsable(EditorBrowsableState.Never)]");   
    sb.Append($"public static void Deconstruct<T>(this Span<T> @this, ");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"out {Type(i)} {Parameter(i)}, ");
    }
    sb.Length -= 2;
    sb.AppendLine(")");
    
    sb.AppendLine($"{Tabs(2)}{{");
    for (int i = 1; i <= argc; i++)
    {
        if (argc == 2 && i == 2)
        {
            sb.AppendLine($"{Tabs(3)}{Parameter(i)} = @this.Length > 1 ? {Element(i)} : default;");
        }
        else
        {
            sb.AppendLine($"{Tabs(3)}{Parameter(i)} = {Element(i)};");
        }
    }
    sb.AppendLine($"{Tabs(2)}}}");

    return sb.ToString();
}

private string Type(int i) => i < MAX_ARGUMENT_LENGTH ? $"T" : "Span<T>";
private string Element(int i) => i < MAX_ARGUMENT_LENGTH ? $"@this[{i - 1}]" : "@this.Slice(7)";
private string Parameter(int i) => i < MAX_ARGUMENT_LENGTH ? $"item{i}" : "rest";

private string Tabs(int count)
{
    var sb = new StringBuilder();
    for (int i = 0; i < count; i++)
    {
        sb.Append("    ");
    }
    return sb.ToString();
}

private IEnumerable<int> GetIndices(int argc)
{
    for (int i = 1; i <= argc; i++)
    {
        yield return i;
    }
}
#>
