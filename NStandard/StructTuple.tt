<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
using System.ComponentModel;

namespace NStandard
{
    public static class StructTuple
    {
<#
    for (int i = 1; i <= MAX_ARGUMENT_LENGTH; i++)
    {
#>
        <#=CreatorCode(i)#>
<#
    }
#>
    }

<#
    for (int i = 1; i <= MAX_ARGUMENT_LENGTH; i++)
    {
#>
    <#=Code(i)#>
<#
    }
#>
}

<#+
const int MAX_ARGUMENT_LENGTH = 8;

private string CreatorCode(int argc)
{
    var indices = GetIndices(argc);
    var genericsCode = string.Join(", ", indices.Select(i => Type(i)));

    var summary = @"/// <summary>
        /// Create a tuple of structs.
        /// </summary>";

    var sb = new StringBuilder();

    sb.AppendLine(summary);
    sb.Append($"{Tabs(2)}public static StructTuple<{genericsCode}> Create<{genericsCode}>(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"{Type(i)} {Parameter(i)}, ");
    }
    sb.Length -= 2;
    sb.Append(")");

    sb.Append($" => new StructTuple<{genericsCode}>(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"{Parameter(i)}, ");
    }
    sb.Length -= 2;
    sb.Append(");");

    return sb.ToString();
}

private string Code(int argc)
{
    var indices = GetIndices(argc);
    var genericsCode = string.Join(", ", indices.Select(i => Type(i)));

    var sb = new StringBuilder();

    sb.AppendLine($"public struct StructTuple<{genericsCode}>");
    sb.AppendLine($"{Tabs(1)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(2)}public {Type(i)} {Property(i)};");
    }
    sb.AppendLine("");

    sb.Append($"{Tabs(2)}public StructTuple(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"{Type(i)} {Parameter(i)}, ");
    }
    sb.Length -= 2;
    sb.AppendLine(")");
    
    sb.AppendLine($"{Tabs(2)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(3)}{Property(i)} = {Parameter(i)};");
    }
    sb.AppendLine($"{Tabs(2)}}}");
    sb.AppendLine();
    
    
    sb.AppendLine($"{Tabs(2)}[EditorBrowsable(EditorBrowsableState.Never)]");
    sb.Append($"{Tabs(2)}public void Deconstruct(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"out {Type(i)} {Parameter(i)}, ");
    }
    sb.Length -= 2;
    sb.AppendLine(")");
    
    sb.AppendLine($"{Tabs(2)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(3)}{Parameter(i)} = {Property(i)};");
    }
    sb.AppendLine($"{Tabs(2)}}}");

    sb.AppendLine($"{Tabs(1)}}}");

    return sb.ToString();
}

private string Type(int i) => i < MAX_ARGUMENT_LENGTH ? $"T{i}" : "TRest";
private string Property(int i) => i < MAX_ARGUMENT_LENGTH ? $"Item{i}" : "Rest";
private string Parameter(int i) => i < MAX_ARGUMENT_LENGTH ? $"item{i}" : "rest";

private string Tabs(int count)
{
    var sb = new StringBuilder();
    for (int i = 0; i < count; i++)
    {
        sb.Append("    ");
    }
    return sb.ToString();
}

private IEnumerable<int> GetIndices(int argc)
{
    for (int i = 1; i <= argc; i++)
    {
        yield return i;
    }
}
#>
