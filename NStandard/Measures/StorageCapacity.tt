<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
using System.Collections.Generic;
using System.Linq;
using static NStandard.Measures.<#=_class#>;

namespace NStandard.Measures;

public static class <#=_class#>
{
<#
    foreach(var pair in _dict)
    {
        var key = pair.Key;
        var div = pair.Value;
#>
	public struct <#=key#>(<#=_valueType#> value) : IMeasurable<<#=_valueType#>>
	{
		public <#=_valueType#> Value { get; set; } = value;

		public static <#=key#> operator +(<#=key#> left, <#=key#> right) => new(left.Value + right.Value);
		public static <#=key#> operator -(<#=key#> left, <#=key#> right) => new(left.Value - right.Value);
		public static <#=key#> operator *(<#=key#> left, double right) => new(left.Value * right);
		public static <#=key#> operator /(<#=key#> left, double right) => new(left.Value / right);
		public static <#=key#> operator /(<#=key#> left, <#=key#> right) => left.Value / right.Value;
        
		public static bool operator ==(<#=key#> left, <#=key#> right) => left.Value == right.Value;
		public static bool operator !=(<#=key#> left, <#=key#> right) => left.Value != right.Value;
		public static bool operator <(<#=key#> left, <#=key#> right) => left.Value < right.Value;
		public static bool operator <=(<#=key#> left, <#=key#> right) => left.Value <= right.Value;
		public static bool operator >(<#=key#> left, <#=key#> right) => left.Value > right.Value;
		public static bool operator >=(<#=key#> left, <#=key#> right) => left.Value >= right.Value;
        
<#
    foreach(var _pair in _dict)
    {
        if (key == _pair.Key) continue;

        var other = _pair.Key;
        var mul = _pair.Value;
#>
<#
        if (mul >= div)
        {
#>
		public static explicit operator <#=key#>(<#=other#> other) => new(other.Value * <#=mul / div#>);
<#
        }
        else
        {
#>
		public static explicit operator <#=key#>(<#=other#> other) => new(other.Value / <#=div / mul#>);
<#
        }
    }
#>
        public static implicit operator <#=key#>(double value) => new <#=key#>(value);

		public override string ToString() => $"{Value} <#=key#>";
	}

<#
    }
#>
}

public static class <#=_class#>Extensions
{
<#
    foreach(var pair in _dict)
    {
        var key = pair.Key;
        var div = pair.Value;
#>
    public static <#=key#> Sum(this IEnumerable<<#=key#>> @this) => new <#=key#>(@this.Sum(x => x.Value));
    public static <#=key#> Average(this IEnumerable<<#=key#>> @this) => new <#=key#>(@this.Average(x => x.Value));

<#
    }
#>
}

<#+
private readonly string _class = "StorageCapacity";
private readonly string _valueType = "double";

private readonly Dictionary<string, long> _dict = new()
{
    ["b"] = 1,
    ["kb"] = 1024,
    ["mb"] = (long)1024 * 1024,
    ["gb"] = (long)1024 * 1024 * 1024,
    ["tb"] = (long)1024 * 1024 * 1024 * 1024,
    ["pb"] = (long)1024 * 1024 * 1024 * 1024 * 1024,

    ["B"] = 8,
    ["KB"] = (long)8 * 1024,
    ["MB"] = (long)8 * 1024 * 1024,
    ["GB"] = (long)8 * 1024 * 1024 * 1024,
    ["TB"] = (long)8 * 1024 * 1024 * 1024 * 1024,
    ["PB"] = (long)8 * 1024 * 1024 * 1024 * 1024 * 1024,
};
#>