<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
using System;

namespace NStandard.Static;

public static partial class MathEx
{
    private class CombinDpContainer : DpContainer<StructTuple<long, long>, long>
    {
        public override long StateTransfer(StructTuple<long, long> param)
        {
            var (number, chosen) = param;

            var _chosen = number - chosen;
            if (_chosen < chosen) chosen = _chosen;

            if (chosen == 1) return number;
            if (chosen == 0) return 1;
            if (chosen == number) return 1;

            //return MathEx.Permut(number, chosen) / MathEx.Permut(chosen, chosen);
            return this[StructTuple.Create(number - 1, chosen - 1)] + this[StructTuple.Create(number - 1, chosen)];
        }
    }

<#=Code("int")#>

<#=Code("long")#>
}

<#+
private string Code(string type)
{
    return $"""
    /// <summary>
    /// Returns the number of combinations for a given number of items.
    /// </summary>
    /// <param name="number"> The number of items. </param>
    /// <param name="chosen"> The number of items in each combination. </param>
    /// <returns></returns>
    public static {type} Combin({type} number, {type} chosen)
    {"{"}        
        if (chosen < 0) throw new ArgumentException("The choice must be non-negative.", nameof(chosen));
        if (number < chosen) throw new ArgumentException("The total must be greater than or equal to the choice.", nameof(chosen));

        if (chosen == 1) return number;
        if (chosen == 0) return 1;
        if (chosen == number) return 1;

        var dp = new CombinDpContainer();
        return {(type == "long" ? """
        dp[StructTuple.Create(number, chosen)];
        """ : $"""
        checked(({type})dp[StructTuple.Create((long)number, (long)chosen)]);
        """)}
    {"}"}
""";
}
#>
