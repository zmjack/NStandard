<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
namespace NStandard.Static;

public static partial class MathEx
{
<#=Code("int")#>

<#=Code("decimal", "m")#>

<#=Code("double")#>
}

<#+
private string Code(string type, string postfix = "")
{
    return $"""
    /// <summary>
    /// Rounds a number down, to the nearest multiple of significance.
    /// </summary>
    /// <param name="n"> The value that you want to round. </param>
    /// <param name="significance"> The multiple to which you want to round. </param>
    /// <param name="awayFromZero"> When given a non-zero number, this function will round away from zero. </param>
    /// <returns></returns>
    public static {type} Floor({type} n, {type} significance, bool awayFromZero = false)
    {"{"}{(type == "double" ? """
        
        if (double.IsInfinity(n) || double.IsNaN(n)) return double.NaN;
        if (double.IsInfinity(significance) || double.IsNaN(significance)) return double.NaN;
        
        return (double)Floor((decimal)n, (decimal)significance, awayFromZero);
""" : $"""

        if (n == 0{postfix}) return 0{postfix};
        if (significance == 0{postfix}) return 0{postfix};
        if (significance < 0{postfix}) significance -= significance;
        
        var mod = n % significance;
        if (mod == 0) return n;

        var times = (int)(n / significance);
        if (n > 0{postfix}) return significance * times;
        else
        {"{"}
            if (awayFromZero) return significance * times;
            else return significance * (times - 1{postfix});
        {"}"}
""")
}
    {"}"}
""";
}
#>
